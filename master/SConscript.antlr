# -*- python -*-
import re
import os.path
import sys

Import('env')

#How to use: SConscript("SConscript.antlr"), exports={'env' : env})

parseNamesScript = "src/buildParseNames.py"
namesBuilder = Builder(action='python %s $SOURCE $TARGET' % (parseNamesScript),
        suffix='.h', src_suffix='.txt')
namesEnv = Environment(BUILDERS = {'ParseNames' : namesBuilder})
names = namesEnv.ParseNames('src/SqlSQL2Tokens', ['src/SqlSQL2ImpTokenTypes.txt'])
env.Depends(names, parseNamesScript)
env["ANTLR_NAME_HEADER"] = names

class AntlrFileEmitter:
    """File name computers borrowed from: 
    http://www.scons.org/wiki/AntlrBuilder (retr. 1/23/2012)"""
    def __init__(self):
        pass

    def computeGrammarTargets(self, classname):
        srcs = [classname + act + ext 
                for act in ["Lexer", "Parser"] 
                for ext in [".cpp", ".hpp"]]
        tokens = [classname + kind + "TokenTypes" + ext
                  for kind in ["Lex", ""]
                  for ext in [".hpp", ".txt"]]
        return srcs + tokens

    def stripSuffix(self, name):
        if name.endswith(".g"):
            return name[:-2]
        return name

    def prefixSuffixStrip(self, path):
        return self.stripSuffix(os.path.basename(path))

    def computeTargets(self, grammar, superGrammar):
        stripped = map(self.stripSuffix, [grammar, superGrammar])
        targets = self.computeGrammarTargets(stripped[0])
        targets += self.computeGrammarTargets(stripped[1])
        (path,base) = os.path.split(grammar)
        targets.append(os.path.join(path, "expanded" + base))
        return targets
        
afe = AntlrFileEmitter()
srcs = ["src/SqlSQL2.g", "src/DmlSQL2.g"]
bases = map(os.path.basename, srcs)
tgts = env.Command(afe.computeTargets(*srcs), srcs, 
                   "antlr -glib %s %s" % (bases[1], bases[0]),
                   chdir="src")
env.Append(antlrout=tgts)
depends = filter(lambda t: not t.name.endswith(".cpp"), tgts)
env.Append(antlrdeps=depends)  



#print map(lambda t: t.name, depends)
#print tgts
