# -*- python -*-
import subprocess, os, sys

Import("env")
Import("envNoXrd")

testEnv = envNoXrd.Clone()
testEnv.Append(CPPPATH = env["built_cpppath"])
testEnv.Append(LIBPATH = env["built_libpath"])
##CPPPATH = ['../include', '../../common/include'])
#print "env cpp path:", testEnv["CPPPATH"]
testEnv.Append(LIBPATH = ["../bldNoXrd"])

conf = Configure(testEnv)
conf.CheckLib("stdc++", language="c++")
conf.CheckHeader("lsst/qserv/worker.pb.h", language="C++")
# Ideally, should propagate from qserv_worker deps
#conf.CheckLib("protobuf", language="c++") 
#conf.CheckLib("qserv_worker", language="c++")
testEnv = conf.Finish()

def patch_environ(environ, libpaths):
    if not libpaths: return environ
    def replace_rel(p):
        if p.startswith(".."): return os.environ["PWD"] + p[2:]
        return p
    libpaths = map(replace_rel, libpaths)
    ldpath = {}
    if environ.has_key("LD_LIBRARY_PATH"):
        ldpath = ":".join([environ["LD_LIBRARY_PATH"]] + libpaths)
    else: ldpath = ":".join(libpaths)
    newenv  = dict(environ)
    newenv["LD_LIBRARY_PATH"] = ldpath
    return newenv
 
def run_test(target, source, env):
    log = file(str(target[0]) + ".failed", "w")
    pe = patch_environ(os.environ, env.Dictionary()["LIBPATH"])
    ret = subprocess.call(str(source[0]), stdout=log, stderr=log, env=pe)
    log.close()
    if ret == 0:
        os.rename(str(target[0]) + ".failed", str(target[0]))
    else:
        print >> sys.stderr, "*** TEST FAILED ***", source[0], ret
    return ret

bld = Builder(action = run_test, prefix = ".tests/")
testEnv.Append(BUILDERS = {'Test': bld})
for src in Glob("*.cc"):
    libs = []
    if(filter(lambda s: s in src.name, 
              ["MySqlFs_", "FifoScheduler_", "QuerySql_", "SanityCheck"])):
        src = [src] + testEnv["built_libs"] 
        libs = testEnv["built_elibs"] + ["mysqlclient_r", "XrdSys", "XrdClient", "XrdUtils"]
    elif "PathStructure_" in src.name:
        # src = [src, testEnv.Object("QservPathStructure.o", 
        #                            "../src/QservPathStructure.cc")]
        src = [src, "../src/QservPathStructure.cc"]
    elif "QservOss_" in src.name:
        ## Keep src list in sync with cmsSources
        src = [src] + map(lambda f: "../src/" + f, ["Config.cc",
                                                    "QservOss.cc", 
                                                    "Logger.cc", 
                                                    "MySqlExportMgr.cc"])
        libs = testEnv["built_elibs"] + ["mysqlclient_r", "XrdOuc",
                                         "XrdClient", "XrdUtils", "XrdSys"]
    elif "SanityCheck" in src.name:
        src = [src, "../src/Config.cc"]

    else:
        src = [src]
    pass

    prog = testEnv.Program(src, LIBS=libs)

    if not ("PathStructure_" in src[0].name):  # PathStructure fails
        test = testEnv.Test(prog)
    pass

