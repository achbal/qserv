# -*- python -*-
Import('env')
Import('detect_deps')
import os, fnmatch

# This seems not to work if placed in lib/
# The path to ../src seems to prevent scons from building .os files in
# the build dir.
libEnv = env.Clone()
 
# Build up list of sources for lib.
sources=[]
#print os.getcwd(), os.listdir('../src')
srctop = "../src/"
for root, dirs, files in os.walk(srctop):
    subpath = root[len(srctop):]
    sources += map(lambda f: os.path.join(subpath, f), 
                   fnmatch.filter(files, "*.cc"))
    # Filter out dotfiles?
    dirs = [d for d in dirs if not fnmatch.fnmatch(d, ".*")]
dontbuild = set(["monet/monetdbtest.cc"]) # test
sources = [s for s in sources if s not in dontbuild]

libEnv.Append(CPPPATH = ['../include'])
libEnv.Append(CPPPATH = ['../../common/include']) 
libEnv.Append(LIBPATH = ['../../common/lib'])
    
post = detect_deps.importDeps(libEnv, "../../common/include/lsst/qserv/worker.pb.h")

# Hack to workaround missing XrdSfs library in xrootd.
if libEnv.has_key('sfsObjs'):
    sources += libEnv["sfsObjs"]

libEnv.Append(LIBPATH = ['../../common/lib']) 
post2 = detect_deps.importDeps(libEnv, "../../common/lib/qserv_proto")
post = detect_deps.mergeDict(post, post2)
post2 = detect_deps.importDeps(libEnv, "../../common/lib/qserv_common")
post = detect_deps.mergeDict(post, post2)
post2 = detect_deps.importDeps(env, "../../common/lib/qserv_common")
post = detect_deps.mergeDict(post, post2)

# Apply lib dependencies.
conf = Configure(libEnv)
detect_deps.checkLibsFromDict(conf, post)
conf.CheckLib("qserv_common")
conf.CheckLib("qserv_proto")
conf.CheckLib("XrdOfs")
libEnv = conf.Finish()

# MonetDb MAPI
# Make this non-hardcoded later.
monetInstallDir = "/scratch/danielw/MonetDB-Apr2012-SP1"
libEnv['ENV']['PKG_CONFIG_PATH'] = [monetInstallDir + "/lib/pkgconfig"]
libEnv.ParseConfig('pkg-config --cflags --libs monetdb-mapi')
#mLib = env.Library("monet/MonetConnection.cc")
#sources += mLib

lib = libEnv.SharedLibrary("qserv_worker", sources)
installedLib = libEnv.Install('lib', lib)
#export
env.Append(built_libs=[installedLib[0]])
env.Append(built_cpppath=libEnv["CPPPATH"])
env.Append(built_libpath=libEnv["LIBPATH"])
env.Append(built_elibs=libEnv["LIBS"])

schLib = libEnv.Library("qserv_schedtest", 
                        ("Base.cc FifoScheduler.cc TodoList.cc Task.cc"
                         + "").split())
installedSchLib = libEnv.Install('lib', schLib)
#export
env.Append(sched_libs=[installedSchLib[0]])
