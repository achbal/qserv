# -*- python -*-
Import('env')
Import('detect_deps')
import os, fnmatch

# This seems not to work if placed in lib/
# The path to ../src seems to prevent scons from building .os files in
# the build dir.
libEnv = env.Clone()
 
# Build up list of sources for lib.
cmsSourcesOnly = ["QservOss.cc"]
sharedSources = ["Config.cc", "Logger.cc", "MySqlExportMgr.cc"]
sources = []
cmsSources = cmsSourcesOnly + sharedSources
#print os.getcwd(), os.listdir('../src')
for root, dirs, files in os.walk('../src'):
    files = [f for f in files if f not in cmsSourcesOnly]
    sources += fnmatch.filter(files, "*.cc")
    # Filter out dotfiles?
    dirs = [d for d in dirs if not fnmatch.fnmatch(d, ".*")]

libEnv.Append(CPPPATH = ['../include'])
libEnv.Append(CPPPATH = ['../../common/include']) 
libEnv.Append(LIBPATH = ['../../common/lib'])
    
post = detect_deps.importDeps(libEnv, "../../common/include/lsst/qserv/worker.pb.h")

# Hack to workaround missing XrdSfs library in xrootd.
if libEnv.has_key('sfsObjs'):
    sources += libEnv["sfsObjs"]

libEnv.Append(LIBPATH = ['../../common/lib']) 
post2 = detect_deps.importDeps(libEnv, "../../common/lib/qserv_proto")
post = detect_deps.mergeDict(post, post2)
post2 = detect_deps.importDeps(libEnv, "../../common/lib/qserv_common")
post = detect_deps.mergeDict(post, post2)
post2 = detect_deps.importDeps(env, "../../common/lib/qserv_common")
post = detect_deps.mergeDict(post, post2)

def requireLib(conf, libname):
    if not conf.CheckLib(libname):
        print "******** Can't link %s .   BUILD FAILED. *********" % (libname)
    pass
# Apply lib dependencies.
conf = Configure(libEnv)
detect_deps.checkLibsFromDict(conf, post)
requireLib(conf, "qserv_common")
requireLib(conf, "qserv_proto")
requireLib(conf, "XrdUtils")
requireLib(conf, "XrdClient")
requireLib(conf, "XrdServer")
requireLib(conf, "XrdSys")
requireLib(conf, "XrdOfs")
requireLib(conf, "XrdSfs")
libEnv = conf.Finish()

cmsLib = libEnv.SharedLibrary("qserv_workerCmsd", cmsSources)
lib = libEnv.SharedLibrary("qserv_worker", sources)
installedLib = libEnv.Install('lib', lib)
installedCms = libEnv.Install('lib', cmsLib)
#export
env.Append(built_libs=[installedLib[0],installedCms[0]])
env.Append(built_cpppath=libEnv["CPPPATH"])
env.Append(built_libpath=libEnv["LIBPATH"])
env.Append(built_elibs=libEnv["LIBS"])

schLib = libEnv.Library("qserv_schedtest", 
                        ("Base.cc FifoScheduler.cc TodoList.cc Task.cc"
                         + "").split())
installedSchLib = libEnv.Install('lib', schLib)
#export
env.Append(sched_libs=[installedSchLib[0]])
