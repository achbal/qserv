# -*- python -*-
#
# Setup our environment
#
# Do not change these
import glob, os, re, sys

# Note: This uses the build-variant feature in Scons, which is known to be 
# troublesome in Scons 0.98.5.  Scons 1.2.0 and 2.0.1 are known to work.

sys.path.append("../common")
import detect_deps

env = Environment()
searchRoots = ['/usr', '/usr/local/'] # search in /usr/local by default.
if os.environ.has_key('SEARCH_ROOTS'):
    searchRoots = os.environ['SEARCH_ROOTS'].split(":")

# Find Scalla/xrootd directories
x = detect_deps.XrdHelper(searchRoots)
(xrd_inc, xrd_lib) = x.getXrdLibInc()
hasXrootd = not ((not xrd_inc) or (not xrd_lib))
if not hasXrootd:
     print >>sys.stderr, "Can't find xrootd headers or libraries"
     Exit(1)
else:
    print >> sys.stderr, "Using xrootd inc/lib: ", xrd_inc, xrd_lib

env.Append(CPPPATH = [xrd_inc])
env.Append(LIBPATH = [xrd_lib])

if os.environ.has_key('SSL_DIR'):
    ssl_dir = os.environ['SSL_DIR']
    if os.path.exists(ssl_dir):
        env.Append(LIBPATH=[ssl_dir])

# Add lib64 for Redhat/Fedora
if os.path.exists("/usr/lib64"): env.Append(LIBPATH=["/usr/lib64"])
conf = Configure(env)

if not conf.CheckLib("ssl"):
    print >> sys.stderr, "Could not locate ssl"
    Exit(1)
if not conf.CheckLib("crypto"):
    print >> sys.stderr, "Could not locate crypto"
    Exit(1)

if not conf.CheckLibWithHeader("XrdSys", "XrdSfs/XrdSfsInterface.hh", "C++"):
    print >> sys.stderr, "Could not locate XrdSys"
    Exit(1)

missingBoost = []
for pkg in ["regex", "thread", "signals"]:
    if not detect_deps.checkAddBoost(conf, "boost_" + pkg):
        print >> sys.stderr, "Missing boost_" + pkg
        missingBoost.append(pkg)
if not conf.CheckCXXHeader("boost/regex.hpp"):
    missingBoost.append("boost/regex.hpp")

if missingBoost: Exit(1)
    
env = conf.Finish()

# Describe what your package contains here.
env.Help("""
LSST Query Services worker package
""")

#
# Build/install things
#

## Build lib twice, with and without xrd
## Must invoke w/ variant_dir at top-level SConstruct.
envNoXrd = env.Clone(CCFLAGS=["-g","-DNO_XROOTD_FS"])
env.Append(CCFLAGS=['-g','-pedantic','-Wno-long-long'])
# Hack to workaround missing XrdSfs library in xrootd.
sfsObjs = map(lambda f: env.SharedObject(os.path.join("bld",f+".os"),
                                         os.path.join(xrd_inc, "XrdSfs", f)),
              ["XrdSfsCallBack.cc","XrdSfsNative.cc"])
env.Append(sfsObjs=sfsObjs)
envNoXrd.Append(sfsObjs=sfsObjs)
for bldDir, expEnv in [['bld',env], ['bldNoXrd',envNoXrd]]:
#for bldDir, expEnv in [['bld',env]]:
    try:
        VariantDir(bldDir, 'src')               
        SConscript("src/SConscript.lib", variant_dir=bldDir,
                   exports={'env' : expEnv, 'detect_deps' : detect_deps})
    except Exception, e:
        print >> sys.stderr, "%s: %s" % (os.path.join("src", "SConscript.lib"), e)

# Install lib
env.Alias("install", env.Install("dist", env["built_libs"]))

for d in Split("tests tools doc"): 
    if os.path.isdir(d):
        try:
            SConscript(os.path.join(d, "SConscript"), 
                       exports={'env' : env, 'envNoXrd' : envNoXrd,
                                'detect_deps' : detect_deps})
        except Exception, e:
            print >> sys.stderr, "%s: %s" % (os.path.join(d, "SConscript"), e)
