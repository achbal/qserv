# -*- python -*-
#
# Setup our environment
#
Import('*')
import glob, os, re, sys
from itertools import chain, izip, repeat
import SCons.Util
import detect # Qserv dep detector


# Describe what your package contains here.
env.Help("""
Qserv core code
""")

# TODO: 
#  * Make the configure-check optional.
###
###
extraTgts = {}
extraTgts['dist'] = []
canBuild = True
custom = detect.importCustom(env, extraTgts)
geomLib = detect.extractGeometry(custom)
if geomLib:
    extraTgts['dist'].append(('lsst/qserv/master', env.File(geomLib)))
metaFiles = detect.findMeta(env)
for f in metaFiles: extraTgts['dist'].append(('lsst/qserv/meta', f))

hasMysql = detect.checkMySql(env)


# Handle debug
debug = ARGUMENTS.get('debug', 0)
print "debug is", debug
if int(debug):
    print "Debug build requested."
    env.Append(CCFLAGS = '-g')

## import via eups if directed
if 'eups' in ARGUMENTS:
    import eups
    eups.importDeps(env)
    

# Environment
# Must do all env modifiers here, otherwise SCons complains
# about different environments used to build files in shared components.
if not env.GetOption('clean'):    
    canBuild = canBuild and detect.checkMySql(env)
    detect.addExtern(env, ARGUMENTS.get('extern', None))
    if detect.setXrootd(env):
        canBuild = canBuild and detect.checkXrootdLink(env)
    else: canBuild = False
    env.Append(CPPPATH=[os.getcwd()]) # top level
    env.Append(CPPPATH=[env['PROTOC_INC']])

    env.Append(CPPFLAGS=["-D_FILE_OFFSET_BITS=64", "-fPIC"])
    env.Append(CPPPATH=env["PROTOC_INC"])
    env.Append(CPPPATH=["modules"])

if not canBuild:
    raise StandardError("can't build")

# all modules
allModules = """control czar global log merger meta mysql obsolete
                parser proto proxy qana qdisp qproc query tests util
                wbase wconfig wcontrol wdb wpublish wsched
                xrdc xrdfs xrdoss""".split()

# Dependencies to fix:
# packetiter in util depends on xrdc, util shouldn't depend on anything
# Products
shProducts = { "xrdfs" : {'mods' : """proto xrdfs
                                      mysql util
                                      wbase wconfig wcontrol wdb 
                                      wpublish wsched
                                      log global""".split(),
                          'libs' : """ssl crypto mysqlclient_r protobuf
                                      boost_regex boost_thread
                                      boost_signals
                                      XrdSys XrdServer XrdClient
                                      XrdOfs XrdSfs XrdUtils""".split(),
                          'distDir' : 'lib'},

               "xrdoss" : {'mods' : """log mysql obsolete util wbase wconfig
                                       xrdoss wpublish""".split(),
                           'libs' : """boost_regex boost_signals boost_thread 
                                       mysqlclient_r ssl crypto""".split(),
                           'distDir' : 'lib'
                           },
               "_masterLib" : {'mods' : """czar control parser query
                                           log merger meta mysql util xrdc
                                           obsolete proto
                                           qana qdisp qproc""".split(),
                               'libs' : """ssl crypto antlr
                                      mysqlclient_r protobuf
                                      XrdPosix XrdPosixPreload XrdUtils
                                      boost_regex boost_thread
                                      boost_signals""".split(),
                               'SHLIBPREFIX' : '',
                               'distDir' : 'lsst/qserv/master'}
               }
# modules used in shProducts
modList = [m for m in chain(*map(lambda d: d['mods'],
                                shProducts.values()))]
libProducts = dict(izip(modList, repeat(None)))
defaultTgts = dict()

# libDepName = "extLibs"
# def getLibDeps(mName):
#     try:
#         libDeps = open(os.path.join(mName, libDepName)).read()
#         return libDeps
#     except IOError, e:
#         #print "Warning, no %s for module %s" % (libDepName, mName)
#         return []

def getSrcs(mName):
#    srcs = os.listdir(os.path.join(mRoot,mName))
#    return map(lambda s: os.path.join(mRoot, mName, s), srcs)
    srcs = os.listdir(mName)
    return map(lambda s: os.path.join(mName, s), srcs)


def getTgts(mName):
    scriptPath = os.path.join(mName, "SConscript")
    if env.Glob(scriptPath): # os.access is faulty with VariantDir
        tgts = SConscript(scriptPath,
                          exports={'env': env, 'extraTgts': extraTgts})
        return tgts
    else:
        #print "No targets for %s, using glob" % mName
        # All .cc, except test files.        
        files = filter(lambda f: not os.path.basename(str(f)).startswith("test"),
                       env.Glob(os.path.join(mName, "*.cc")))
        #print mName, "has files:::::", map(str,files)
        files.sort(key=lambda n: n.str_for_display())
        defaultTgts[mName] = files
        return files

boostChecker = detect.BoostChecker(env)
def findLibs(libList):
    def cheapCheckLib(libName):
        if libName.startswith("boost"):
            return boostChecker.getLibName(libName)
        else: return libName
    return map(cheapCheckLib, libList)

def makeSharedObjectCC(env, ccFile):
    if str(ccFile).endswith(".cc"): return env.SharedObject(ccFile)[0]
    else: return ccFile

def getTests(env, mName):
    scriptPath = os.path.join(mName, "SConscript.test")
    if env.Glob(scriptPath):
        tests = SConscript(scriptPath, exports={'env' : env,
                                                'libProducts' : libProducts,
                                                'defaultTgts' : defaultTgts,
                                                'findLibs' : findLibs})
        return tgts
    else:
        return None
########################################################################
## Real work now.
########################################################################

# Gather up source files
for mod in allModules:
    libProducts[mod] = getTgts(mod)

# Compute non-custom shared objects
for m in defaultTgts:
    files = defaultTgts[m]
    objs = [makeSharedObjectCC(env, a) for a in set(files)]
    defaultTgts[m] = objs
    

# Compute shlib targets
for (pkg, opts) in shProducts.items():
    srcs = []
    for m in opts['mods']: # Visit modules and compose union of LIBS
        if m in defaultTgts:
            srcs.extend(defaultTgts[m])
        else:
            prods = libProducts[m]
            srcs.extend(prods)
        pass

    # Eliminate dupes for srcs and libs, and
    # convert .cc to SharedObject to prevent warning
    # (scons: warning: Two different environments)
    srcs = [makeSharedObjectCC(env, a) for a in set(srcs)]
    # Sort to prevent dependency-order rebuilding
    srcs.sort(key=lambda n: n.str_for_display())
    #env.Append(LIBS=libs)
    #extLibFlags = ["-l"+lib for lib in findLibs(opts['libs'])]
    extLibs = [lib for lib in findLibs(opts['libs'])]
    if opts.has_key('SHLIBPREFIX'):
        out = env.SharedLibrary(pkg + ".so", srcs, LIBS=extLibs,
                                SHLIBPREFIX=opts['SHLIBPREFIX'])
    else:
        out = env.SharedLibrary(pkg + ".so", srcs, LIBS=extLibs)
    extraTgts['dist'].append((opts['distDir'], out))

#Runner wrapper
import runner
#### print extraTgts["PYTHONPATH"]  #deleteme
env["PYTHONPATH"] = extraTgts["PYTHONPATH"]
f = runner.WrapperScript(env, "qsEnv.sh")
extraTgts['dist'].append(('bin', f))

# Install targets
distDir = 'dist'
for (path, f) in extraTgts['dist']:
    #print "REally installing:", f  ## deleteme
    env.Install(os.path.join(distDir, path), f)


# Tests

# module tests
for m in libProducts.keys():
    tgts = getTests(env, m)
    if tgts: print tgts
#
