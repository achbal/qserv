# -*- python -*-
#
# Setup our environment
#
# Do not change these
Import('*')
import glob, os, re, sys
from itertools import chain, izip, repeat
import SCons.Util
import detect # Qserv dep detector
##import detect_deps


# Describe what your package contains here.
env.Help("""
Qserv core code
""")

# Detect protobufs
##detect_deps.detectProtobufs()

# Handle debug
debug = ARGUMENTS.get('debug', 0) 
print "debug is", debug
if int(debug):
    print "Debug build requested."
    env.Append(CCFLAGS = '-g')

# Environment
# Must do all env modifiers here, otherwise SCons complains
# about different environments used to build files in shared components.
if not env.GetOption('clean'):
    detect.addExtern(env, ARGUMENTS.get('extern', None))
    detect.setXrootd(env)
    env.Append(CPPPATH=[os.getcwd()]) # top level
    env.Append(CPPPATH=[env['PROTOC_INC']])

    env.Append(CPPFLAGS=["-D_FILE_OFFSET_BITS=64", "-fPIC"])
    env.Append(CPPPATH=env["PROTOC_INC"])
    env.Append(CPPPATH=["modules"])



# Products
shProducts = { "xrdfs" : {'mods' : """proto xrdfs 
                                      wbase wconfig wcontrol wdb wsched
                                      log global""".split(),
                          'libs' : """ssl crypto 
                                      boost_regex boost_thread 
                                      boost_signals
                                      XrdSys XrdServer XrdClient
                                      XrdOfs XrdSfs XrdUtils""".split()},
      
               "xrdoss" : {'mods' : ["xrdoss"],
                           'libs' : """ssl crypto""".split()},
               "_masterlib" : {'mods' : """czar parser query
                                           log merger meta mysql util xrdc
                                           obsolete
                                           qana qdisp qproc""".split(),
                               'libs' : """ssl crypto 
                                      boost_regex boost_thread 
                                      boost_signals""".split(),
                               'SHLIBPREFIX' : ''}
               }
modList = [m for m in chain(*map(lambda d: d['mods'], 
                                shProducts.values()))] 

libProducts = dict(izip(modList, repeat(None)))
# libDepName = "extLibs"
# def getLibDeps(mName):
#     try:
#         libDeps = open(os.path.join(mName, libDepName)).read()
#         return libDeps
#     except IOError, e:
#         #print "Warning, no %s for module %s" % (libDepName, mName)
#         return []

def getSrcs(mName):
#    srcs = os.listdir(os.path.join(mRoot,mName))
#    return map(lambda s: os.path.join(mRoot, mName, s), srcs)
    srcs = os.listdir(mName)
    return map(lambda s: os.path.join(mName, s), srcs)

extraTgts = {}
def getTgts(mName):
    scriptPath = os.path.join(mName, "SConscript")
    if env.Glob(scriptPath): # os.access is faulty with VariantDir 
        tgts = SConscript(os.path.join(mName, "SConscript"),
                          exports={'env': env, 'extraTgts': extraTgts})
        return tgts
    else:
        #print "No targets for %s, using glob" % mName
        # All .cc, except test files.
        return filter(lambda f: not str(f).startswith("test"),
                      env.Glob(os.path.join(mName, "*.cc")))

boostChecker = detect.BoostChecker(env)
def findLibs(libList):
    def cheapCheckLib(libName):
        if libName.startswith("boost"):
            return boostChecker.getLibName(libName)
        else: return libName
    return map(cheapCheckLib, libList)

def makeSharedObjectCC(env, ccFile):
    if str(ccFile).endswith(".cc"): return env.SharedObject(ccFile)
    else: return ccFile

########################################################################
## Real work now.
########################################################################

# Gather up source files
for mod in libProducts:
    objs = getTgts(mod)
    libProducts[mod] = objs

# Compute shlib targets 
for (pkg, opts) in shProducts.items():
    srcs = []
    for m in opts['mods']: # Visit modules and compose union of LIBS
        prods = libProducts[m]
        srcs.extend(prods)
        pass
    
    # Eliminate dupes for srcs and libs, and 
    # convert .cc to SharedObject to prevent warning
    # (scons: warning: Two different environments)
    srcs = [makeSharedObjectCC(env, a) for a in set(srcs)]

    #env.Append(LIBS=libs)
    #extLibFlags = ["-l"+lib for lib in findLibs(opts['libs'])]
    extLibs = [lib for lib in findLibs(opts['libs'])]
    if opts.has_key('SHLIBPREFIX'):
        env.SharedLibrary(pkg + ".so", srcs, LIBS=extLibs,
                          SHLIBPREFIX=opts['SHLIBPREFIX'])
    else:
        env.SharedLibrary(pkg + ".so", srcs, LIBS=extLibs)
        
# Install targets

# Tests
# module tests
for m in libProducts.keys():
    testCc = env.Glob(m+'/test*cc')
    for t in testCc:
        (path,f) = os.path.split(str(t))
        # FIXME
        #p = env.Program(f+"bin", [t] + libProducts[m] + )
#
# Build/install things
#

#####################################################################
# Variant support
#    VariantDir(bldDir, 'src')               
#    SConscript("src/SConscript.lib", variant_dir=bldDir,
#               exports={'env' : expEnv, 'detect_deps' : detect_deps})

# for d in Split("proto src tests doc"): 
#     if os.path.isdir(d):
#         try:
#             SConscript(os.path.join(d, "SConscript"), 
#                        exports={'env' : env})
#         except Exception, e:
#             print >> sys.stderr, "%s: %s" % (os.path.join(d, "SConscript"), e)
