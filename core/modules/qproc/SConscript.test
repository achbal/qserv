# -*- python -*-
Import('env')
Import('libProducts')
Import('cacheObjs')

import os
import itertools

programs = []

# build kwmap.h
def charArrayGenerator(filename):
    bSize = 70
    with open(filename,"rb") as f:
        while True:
            block = f.read(10)
            if not block: return
            #print "yielding blob:", block
            yield ",".join(map(lambda s: hex(ord(s)), block))

## Scons wants args=(target, source, env)
## target: headerFile
## source: blobFile
def buildHeader(target, source, env):
    blobFile = str(source[0]) # coerce SCons.File to string
    (name, ext) = os.path.splitext(blobFile)
    print "name is, ", name
    arrayName = os.path.basename(name)
    headerPfx = "unsigned char %s[] = {" % arrayName
    headerSfx = "};"
    length = os.stat(blobFile).st_size
    targetFile = open(str(target[0]), "w") # coerce SCons.File to string
    targetFile.write(headerPfx)
    lines = ",\n".join(map(lambda s:s, charArrayGenerator(blobFile)))
    targetFile.write(lines + "\n")
    targetFile.write(headerSfx + "\n")
    targetFile.write("size_t %s_length = %d;\n" % (arrayName, length))
    targetFile.close()
    return None

bld = Builder(action = buildHeader,
              suffix = '.h',
              src_suffix = '.kvmap')
env.Append(BUILDERS = {'HeaderKvmap' : bld})
header = env.HeaderKvmap('testMap')



# deps on other modules
modDeps = """css global log merger qana query parser proto mysql sql util xrdc""".split()
deps = itertools.chain(*map(lambda m: libProducts[m], modDeps))
deps = cacheObjs(env, deps, ".o")
deps = map(lambda i:i, deps) # un-chain
myDeps = filter(lambda i: not str(i).startswith("test"), env.Glob("*.cc"))
extDeps = "antlr boost_regex boost_thread-mt protobuf ssl crypto XrdPosix XrdClient XrdPosixPreload XrdUtils mysqlclient_r zookeeper_mt".split()
p = env.Program(["testQueryAnalysis.cc"] + myDeps + deps, LIBS=extDeps)
env.Depends(p, header)
programs.append(p)

Return('programs')
