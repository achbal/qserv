// -*- LSST-C++ -*-
/*
 * LSST Data Management System
 * Copyright 2009-2015 AURA/LSST.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */

 /**
  * @file
  *
  * @brief Test C++ parsing and query analysis logic for select expressions
  *
  *
  * @author Fabrice Jammes, IN2P3/SLAC
  */

// System headers
#include <algorithm>
#include <iostream>
#include <iterator>
#include <map>
#include <sstream>
#include <string>

// Third-party headers
#include "boost/algorithm/string.hpp"
#include "boost/format.hpp"

// Boost unit test header
#define BOOST_TEST_MODULE QueryAnaDuplicateSelectExpr
#include "boost/test/included/unit_test.hpp"

// LSST headers
#include "lsst/log/Log.h"

// Qserv headers
#include "css/Facade.h"
#include "global/stringTypes.h"
#include "parser/ParseException.h"
#include "parser/parseExceptions.h"
#include "parser/SelectParser.h"
#include "qana/AnalysisError.h"
#include "qana/DuplSelectExprPlugin.h"
#include "qdisp/ChunkMeta.h"
#include "qproc/QuerySession.h"
#include "query/Constraint.h"
#include "query/QsRestrictor.h"
#include "query/QueryContext.h"
#include "query/SelectList.h"
#include "query/SelectStmt.h"
#include "query/typedefs.h"
#include "testMap.h" // Generated by scons action from testMap.kvmap
#include "testQueryAna.h"
#include "util/Error.h"
#include "util/MultiError.h"


using lsst::qserv::parser::SelectParser;
using lsst::qserv::parser::UnknownAntlrError;
using lsst::qserv::qana::DuplSelectExprPlugin;
using lsst::qserv::qdisp::ChunkMeta;
using lsst::qserv::qproc::ChunkQuerySpec;
using lsst::qserv::qproc::ChunkSpec;
using lsst::qserv::qproc::QuerySession;
using lsst::qserv::query::Constraint;
using lsst::qserv::query::ConstraintVec;
using lsst::qserv::query::ConstraintVector;
using lsst::qserv::query::QsRestrictor;
using lsst::qserv::query::QueryContext;
using lsst::qserv::query::SelectList;
using lsst::qserv::query::SelectStmt;
using lsst::qserv::query::ValueExprPtrVector;
using lsst::qserv::util::Error;
using lsst::qserv::util::MultiError;
using lsst::qserv::StringPair;
using lsst::qserv::StringVector;


////////////////////////////////////////////////////////////////////////
// CppParser basic tests
////////////////////////////////////////////////////////////////////////
BOOST_FIXTURE_TEST_SUITE(OrderBy, ParserFixture)

BOOST_AUTO_TEST_CASE(OrderBySortMultipleField) {
    std::string stmt = "SELECT objectId, taiMidPoint "
        "FROM   Source "
        "ORDER BY objectId, taiMidPoint ASC;"; // FIXME
    std::string expected = "SELECT objectId,taiMidPoint FROM LSST.Source_100 AS QST_1_";
    // TODO: Should check the merge statement to ensure that the ORDER BY is handled properly.
    auto querySession = testAndCompare(qsTest, stmt, expected);

    auto mergeStmt = querySession->getMergeStmt();

    LOGF_INFO("mergeStmt->toString() %1%" % mergeStmt->toString());
    LOGF_INFO("mergeStmt->toQueryTemplateString() %1%" % mergeStmt->toQueryTemplateString());
}

BOOST_AUTO_TEST_CASE(OrderByLimit) { // Test flipped syntax in DM-661
    std::string bad = "SELECT run FROM LSST.Science_Ccd_Exposure limit 2 order by field";
    std::string good = "SELECT run FROM LSST.Science_Ccd_Exposure order by field limit 2";
    std::string expected = "SELECT run FROM LSST.Science_Ccd_Exposure AS QST_1_ ORDER BY field LIMIT 2";
    // TODO: commented out test that is supposed to fail but it does not currently
    // prepareTestQuerySession(qsTest, bad, "ParseException");
    auto querySession = testAndCompare(qsTest, good, expected);

    auto mergeStmt = querySession->getMergeStmt();
    if (mergeStmt!=nullptr) {
        LOGF_INFO("mergeStmt->toString() %1%" % mergeStmt->toString());
        //LOGF_INFO("mergeStmt->toQueryTemplateString() %1%" % mergeStmt->toQueryTemplateString());
    }
    else {
         LOGF_INFO("No merge stmt");
    }
}

BOOST_AUTO_TEST_SUITE_END()
