# -*- python -*-
Import('env')
Import('libProducts')
Import('cacheObjs')
Import('findLibs')

import itertools

programs = []

# deps on other modules
modDeps = "log mysql sql".split()
deps = itertools.chain(*map(lambda m: libProducts[m], modDeps))
deps = cacheObjs(env, deps, ".o")
deps = map(lambda i:i, deps) # un-chain
myDeps = filter(lambda i: not (str(i).startswith("test")
                               or str(i) == "cssLib_wrap.cc"),
                env.Glob("*.cc"))
extDeps = "log log4cxx boost_filesystem boost_system boost_thread mysqlclient_r".split()
p = env.Program(["testKvInterfaceImpl.cc"] + env.Object(myDeps) + deps, LIBS=findLibs(extDeps))
programs.append(p)

# add a unit test which runs on every build
utest = env.UnitTest(p)
env.Append(UNIT_TESTS=utest)

p = env.Program(["testFacade.cc"] + env.Object(myDeps) + deps, LIBS=findLibs(extDeps))
programs.append(p)

# add a unit test which runs on every build
utest = env.UnitTest(p)
env.Append(UNIT_TESTS=utest)

p = env.Program(["testKvInterfaceImplMySql.cc"] + env.Object(myDeps) + deps, LIBS=findLibs(extDeps))
programs.append(p)

extDeps = "log log4cxx boost_filesystem boost_system boost_thread mysqlclient_r".split()

p = env.Program(["testEmptyChunks.cc"] + env.Object(myDeps) + deps, LIBS=findLibs(extDeps))
programs.append(p)
env.Append(UNIT_TESTS=env.UnitTest(p))

Return('programs')
