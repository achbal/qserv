# -*- python -*-
#
# Setup our environment
#
# Do not change these
import glob, os, re, sys
from itertools import chain, izip, repeat
import SCons.Util
##import detect_deps
env = Environment(tools=["default", "protoc", "antlr"])

# Describe what your package contains here.
env.Help("""
Qserv common code
""")

# Detect protobufs
##detect_deps.detectProtobufs()

# Handle debug
debug = ARGUMENTS.get('debug', 0) 
print "debug is", debug
if int(debug):
    print "Debug build requested."
    env.Append(CCFLAGS = '-g')
def findXrd():
    """replace with real version soon"""
    return "/u1/lsst/xrootd-inst/include/xrootd"

# Environment
env.Append(CPPPATH=[os.getcwd()]) # top level
env.Append(CPPPATH=[findXrd()])
env.Append(CPPPATH=[env['PROTOC_INC']])
env.Append(CPPFLAGS=["-D_FILE_OFFSET_BITS=64", "-fPIC"])
# Products

products = { "xrdfs" : """-lssl -lcrypto 
                       -lboost_regex -lboost_thread -lboost_signals
                       -lXrdSys -lXrdServer -lXrdClient -lXrdOfs -lXrdSfs -lXrdUtils
                       proto xrdfs""" ,
             "xrdoss" : """-lXrdSys -lXrdServer -lXrdClient -lXrdOfs -lXrdSfs -lXrdUtils

 """}
shProducts = { "xrdfs" : """proto xrdfs 
                            wbase wconfig wcontrol wdb wsched
                            log global
                         """.split(),
               "xrdoss" : "xrdoss".split(),
               "_masterlib" : """czar parser query
                                 log merger meta mysql obsolete
                                 qana qdisp qproc util xrdc""".split()
               }
modList = [m for m in chain(*shProducts.values())]

libProducts = dict(izip(["proto", "xrdoss","xrdfs"], repeat(None)))
libProducts = dict(izip(modList, repeat(None)))
mRoot = "."
libDepName = "extLibs"
def getLibDeps(mName):
    try:
        libDeps = open(os.path.join(mRoot, mName, libDepName)).read()
        return libDeps
    except IOError, e:
        #print "Warning, no %s for module %s" % (libDepName, mName)
        return []

def getSrcs(mName):
    srcs = os.listdir(os.path.join(mRoot,mName))
    return map(lambda s: os.path.join(mRoot, mName, s), srcs)

extraTgts = {}
def getTgts(mName):
    scriptPath = os.path.join(mRoot, mName, "SConscript")
    if os.access(scriptPath, os.R_OK):
        tgts = SConscript(os.path.join(mRoot, mName, "SConscript"),
                          exports={'env': env, 'extraTgts': extraTgts})
        return tgts
    else:
        #print "No targets for %s, using glob" % mName
        return Glob(os.path.join(mRoot, mName, "*.cc"))

for mod in libProducts:
    objs = getTgts(mod)
    libProducts[mod] = objs
    
for (pkg, moddeps) in shProducts.items():
    srcs = []
    libs = []
    for m in moddeps: # Visit modules and compose union of LIBS
        libs.append(getLibDeps(m))
        srcs.append(libProducts[m])
        pass
    env.Append(LIBS=libs)    
    env.SharedLibrary(pkg + ".so", srcs)



#
# Build/install things
#

#####################################################################
# Variant support
#    VariantDir(bldDir, 'src')               
#    SConscript("src/SConscript.lib", variant_dir=bldDir,
#               exports={'env' : expEnv, 'detect_deps' : detect_deps})

# for d in Split("proto src tests doc"): 
#     if os.path.isdir(d):
#         try:
#             SConscript(os.path.join(d, "SConscript"), 
#                        exports={'env' : env})
#         except Exception, e:
#             print >> sys.stderr, "%s: %s" % (os.path.join(d, "SConscript"), e)
