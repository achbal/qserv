# -*- python -*-
import actions
import commons
import const
import ConfigParser
import errno
import io
import logging
import logger
import os
import sys
import re
import SCons.Node.FS
from SCons.Script import Chmod
import SCons.Util
import shutil
import fileutils

logger = logger.init_default_logger(log_file_prefix="qserv-configuration", level=logging.DEBUG)

env = Environment(tools=['textfile'])

#########################
#
# Defining dependencies
#
#########################

env.Requires(env.Alias('templates'), env.Alias('mkdir'))
env.Requires(env.Alias('mysql'), env.Alias('templates'))
env.Requires(env.Alias('scisql'), env.Alias('templates'))
env.Requires(env.Alias('css'), env.Alias('templates'))
env.Requires(env.Alias('qserv'), env.Alias('templates'))

env.Alias('configure', 
        [
        env.Alias('mkdir'),
        env.Alias('mysql'),
        env.Alias('scisql'),
        env.Alias('css'),
        env.Alias('qserv'),
        env.Alias("client")
        ]
        )

env.Default(env.Alias('configure'))

#########################
#
# Reading config file
#
#########################

opts = SCons.Script.Variables("custom.py")
opts.AddVariables(
	(PathVariable('META_CONFIG', 'Qserv meta-configuration file', None, PathVariable.PathIsFile))
)
opts.Update(env)

config_file_name = env['META_CONFIG']

if not os.path.exists(config_file_name):
    logging.fatal("Your configuration file is missing: %s" % config_file_name)
    sys.exit(1)

try:
    config = commons.read_config(config_file_name)
except ConfigParser.NoOptionError, exc:
    logging.fatal("An option is missing in your configuration file: %s" % exc)
    sys.exit(1)

src_dir=Dir('.').srcnode().abspath
config['src_dir'] = src_dir

env['config']=config
configuration_scripts_dir=os.path.join(config['qserv']['run_base_dir'],'tmp','configure')

#####################################
#
# Defining main directory structure
#
#####################################

mkdir_target_lst = []
make_root_dirs_cmd = env.Command('make-root-dirs-dummy-target', [], actions.check_root_dirs)
mkdir_target_lst.append(make_root_dirs_cmd)

make_root_symlinks_cmd = env.Command('make-root-symlinks-dummy-target', [], actions.check_root_symlinks)
mkdir_target_lst.append(make_root_symlinks_cmd)

env.Alias('mkdir', mkdir_target_lst)


######################################################
#
# Templating system
# fill Qserv config files with qserv-build.conf values
#
######################################################

if 'testdata_dir' in config['qserv'].keys() :
    testdata_dir=config['qserv']['testdata_dir']
else :
     testdata_dir=os.environ.get('QSERV_TESTDATA_DIR')
    

script_dict = {
    '%\(PATH\)s': os.environ.get('PATH'),
    '%\(LD_LIBRARY_PATH\)s': os.environ.get('LD_LIBRARY_PATH'),
    '%\(PYTHON_BIN\)s': SCons.Util.WhereIs("python"),
    '%\(PYTHONPATH\)s': os.environ['PYTHONPATH'],
    '%\(QSERV_MASTER\)s': config['qserv']['master'],
    '%\(QSERV_DIR\)s': config['qserv']['base_dir'],
    '%\(QSERV_RUN_DIR\)s': config['qserv']['run_base_dir'],
    '%\(QSERV_UNIX_USER\)s': os.getlogin(),
    '%\(QSERV_SRC_DIR\)s': config['src_dir'],
    '%\(QSERV_LOG_DIR\)s': config['qserv']['log_dir'],
    '%\(QSERV_PID_DIR\)s': os.path.join(config['qserv']['run_base_dir'],"var", "run"),
    '%\(QSERV_TESTDATA_DIR\)s': testdata_dir,
    '%\(QSERV_RPC_PORT\)s': config['qserv']['rpc_port'],
    '%\(QSERV_USER\)s': config['qserv']['user'],
    '%\(QSERV_LUA_SHARE\)s': os.path.join(config['lua']['base_dir'],"share","lua","5.1"),
    '%\(QSERV_LUA_LIB\)s': os.path.join(config['lua']['base_dir'],"lib","lua","5.1"),
    '%\(QSERV_SCRATCH_DIR\)s': config['qserv']['scratch_dir'],
    '%\(MYSQL_DIR\)s': config['mysqld']['base_dir'],
    '%\(MYSQLD_DATA_DIR\)s': config['mysqld']['data_dir'],
    '%\(MYSQLD_PORT\)s': config['mysqld']['port'],
    # used for mysql-proxy in mono-node
    '%\(MYSQLD_HOST\)s': '127.0.0.1',
    '%\(MYSQLD_SOCK\)s': config['mysqld']['sock'],
    '%\(MYSQLD_USER\)s': config['mysqld']['user'],
    '%\(MYSQLD_PASS\)s': config['mysqld']['pass'],
    '%\(MYSQL_PROXY_PORT\)s': config['mysql_proxy']['port'],
    '%\(XROOTD_DIR\)s': config['xrootd']['base_dir'],
    '%\(XROOTD_MANAGER_HOST\)s': config['qserv']['master'],
    '%\(XROOTD_PORT\)s': config['xrootd']['xrootd_port'],
    '%\(XROOTD_RUN_DIR\)s': os.path.join(config['qserv']['run_base_dir'],"xrootd-run"),
    '%\(XROOTD_ADMIN_DIR\)s': os.path.join(config['qserv']['run_base_dir'],'tmp'),
    '%\(CMSD_MANAGER_PORT\)s': config['xrootd']['cmsd_manager_port'],
    '%\(ZOOKEEPER_PORT\)s': config['zookeeper']['port'],
    '%\(HOME\)s': os.path.expanduser("~")
}

def get_template_targets():

    template_dir_path= os.path.join(config['qserv']['run_base_dir'],"templates", "server")
    target_lst = []

    if config['qserv']['node_type']=='mono':
        script_dict['%\(COMMENT_MONO_NODE\)s']='#MONO-NODE# '
    else:
        script_dict['%\(COMMENT_MONO_NODE\)s']=''

    logger.info("Applying configuration information via templates files ")

    for src_node in fileutils.recursive_glob(template_dir_path,"*",env):

        target_node = fileutils.replace_base_path(template_dir_path,config['qserv']['run_base_dir'],src_node,env)

        if isinstance(src_node, SCons.Node.FS.File) :

            logger.info("Template SOURCE : %s, TARGET : %s" % (src_node, target_node))
            env.Substfile(target_node, src_node, SUBST_DICT=script_dict)
            target_lst.append(target_node)
            # qserv-admin has no extension, Substfile can't manage it easily
            # TODO : qserv-admin could be modified in order to be removed to
            # template files, so that next test could be removed
            target_name = str(target_node)
            f="qserv-admin.pl"
            if os.path.basename(target_name)	== f :
                symlink_name, file_ext = os.path.splitext(target_name)
                env.Command(symlink_name, target_node, actions.symlink)
                target_lst.append(symlink_name)

            path = os.path.dirname(target_name)
            target_basename = os.path.basename(target_name)
            if (os.path.basename(path) == "bin" or
                os.path.basename(path) == "init.d" or
                target_basename in [
                "xrootd.sh",
                "mysql.sh",
                "css.sh",
                "scisql.sh",
                "qserv-czar.sh"
                ]
                ):
                env.AddPostAction(target_node, Chmod("$TARGET", 0760))
            # all other files are configuration files
            else:
                env.AddPostAction(target_node, Chmod("$TARGET", 0660))

    return target_lst

env.Alias("templates", get_template_targets())

#########################
#
# Configure MySQL
#
#########################
install_sh = os.path.join(configuration_scripts_dir, "mysql.sh")
cmd = env.Command('mysql-cmd', [], install_sh)

env.Alias("mysql", cmd)

#########################
#
# Configure css
#
#########################
if config['qserv']['node_type'] in ['mono','master']:

    install_sh = os.path.join(configuration_scripts_dir, "css.sh")
    cmd = env.Command('css-cmd', [], install_sh)

    env.Alias("css", cmd)

#########################
#
# Configure SciSQL
#
#########################
if config['qserv']['node_type'] in ['mono','worker']:

    install_sh = os.path.join(configuration_scripts_dir, "scisql.sh")
    cmd = env.Command('scisql-cmd', [], install_sh)

    env.Alias("scisql", cmd)

#########################
#
# Configure xrootd 
#
#########################
install_sh = os.path.join(configuration_scripts_dir, "xrootd.sh")
cmd = env.Command('xrootd-cmd', [], install_sh)

env.Alias("xrootd", cmd)

#############################
#
# Configure Qserv core 
#
#############################
install_sh = os.path.join(configuration_scripts_dir, "qserv-czar.sh")
cmd = env.Command('qserv-cmd', [], install_sh)

env.Alias("qserv", cmd)

################################
#
# TODO Fill user configuration file
#
################################

def reset_user_config(qserv_run_dir):
    config_file_name=os.path.join(qserv_run_dir, "templates", "client", "qserv.conf")
    homedir=os.path.expanduser("~")
    user_config_dir=os.path.join(homedir, ".lsst")
    user_config_file_name=os.path.join(user_config_dir, "qserv.conf")
    try:
        os.remove(user_config_file_name)
    except OSError:
        pass
    env.Substfile( user_config_file_name, config_file_name, SUBST_DICT=script_dict)
    return [user_config_file_name]
    
env.Alias("client", reset_user_config(config['qserv']['run_base_dir']))


#########################
#
# Uninstall everything:
#
#########################
if 'uninstall' in COMMAND_LINE_TARGETS:
    paths = [
            os.path.join(config['qserv']['log_dir']),
            os.path.join(config['mysqld']['data_dir']),
            os.path.join(config['qserv']['scratch_dir']),
            client_config_dir
            ]

    env['uninstallpaths'] = paths
    uninstall_cmd = env.Command('uninstall-dummy-target', [], actions.uninstall)
    env.Alias("uninstall", uninstall_cmd)

# List all aliases

try:
    from SCons.Node.Alias import default_ans
except ImportError:
    pass
else:
    aliases = default_ans.keys()
    aliases.sort()
    env.Help('\n')
    env.Help('Recognized targets:\n')
    for alias in aliases:
        env.Help('    %s\n' % alias)

