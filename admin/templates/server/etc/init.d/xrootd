#!/usr/bin/env sh
#
# xrootd/cmsd	This shell script takes care of starting and stopping
#		Qserv xrootd/cmsd instances.
# description: xrootd is the filesystem which allow Qserv master to \
# communicate with Qserv workers.\
# It is composed of two services : xrootd and cmsd
# Note

### BEGIN INIT INFO
# Provides: xrootd cmsd
# Short-Description: start and stop xrootd/cmsd
# Description: XRootD software framework is a fully generic suite for fast, \
#              low latency and scalable data access. It's the communication \
#              middleware used between Qserv master and nodes. \ 
### END INIT INFO

. {{QSERV_RUN_DIR}}/etc/init.d/qserv-functions

XROOTD_DIR={{XROOTD_DIR}}
XROOTD_RUN_DIR={{XROOTD_RUN_DIR}}
XROOTD_CONFIG={{QSERV_RUN_DIR}}/etc/lsp.cf
XROOTD_INSTANCE_NAME="worker"

PID_DIR={{QSERV_PID_DIR}}/${XROOTD_INSTANCE_NAME}
LOG_DIR={{QSERV_LOG_DIR}}

export PATH={{PATH}}
export LD_LIBRARY_PATH={{LD_LIBRARY_PATH}}
export QSW_XRDQUERYPATH="/q"
export QSW_DBSOCK="{{MYSQLD_SOCK}}"
export QSW_MYSQLDUMP=`which mysqldump`
QSW_SCRATCHPATH="{{QSERV_RUN_DIR}}/tmp"
QSW_SCRATCHDB="qservScratch"
export QSW_RESULTPATH="${XROOTD_RUN_DIR}/result"

start_service() {

        local prog

	prog=${1##*/}

	pidfile=${PID_DIR}/${prog}.pid
	lockfile={{QSERV_RUN_DIR}}/var/lock/subsys/${prog}
	BINARY=${XROOTD_DIR}/bin/${prog}
	LOGFILE=${LOG_DIR}/${prog}.log
	[ -x ${BINARY} ] || exit 5
	[ -f ${XROOTD_CONFIG} ] || exit 6

	xrootd_cmd="\"${BINARY} -c ${XROOTD_CONFIG} -l ${LOGFILE} -n ${XROOTD_INSTANCE_NAME} -I v4 &\""
	# here pid files will be created twice time : one by xrootd/cmsd and one by start()
	# but it works
	eval start -p ${pidfile} -l ${lockfile} ${prog} ${xrootd_cmd}
	retval=$?
	return $retval
}

stop_service() {

        local prog

        prog=${1##*/}

	pidfile=${PID_DIR}/${prog}.pid
	lockfile={{QSERV_RUN_DIR}}/var/lock/subsys/${prog}

	eval stop -p $pidfile -l $lockfile $prog
	retval=$?
	return $retval
}

start_all() {
        local xrootd_started cmsd_started=0 retval=1
        mkdir -p ${QSW_RESULTPATH} || {
           log_failure_msg "Failed to create ${QSW_RESULTPATH}"
           return 1 
        }
         mkdir -p ${PID_DIR} || {
           log_failure_msg "Failed to create ${PID_DIR}"
           return 1
        }

        start_service "xrootd"
	xrootd_started=$?
        {{COMMENT_MONO_NODE}}start_service "cmsd"
	{{COMMENT_MONO_NODE}}cmsd_started=$?
	[ $xrootd_started -a $cmsd_started ] && retval=0
	return $retval
}

stop_all() {
        local xrootd_stopped cmsd_stopped=0 retval=1
        stop_service "xrootd"
	xrootd_stopped=$?
	{{COMMENT_MONO_NODE}}stop_service "cmsd"
	{{COMMENT_MONO_NODE}}cmsd_stopped=$?
	[ $xrootd_stopped -a $cmsd_stopped ] && retval=0
	return $retval
}

status_all () {
        local xrootd_status cmsd_status
	NAME="xrootd"
       	DAEMON=$(which ${NAME})
       	pidfile=${PID_DIR}/${NAME}.pid
       	status_of_proc -p $pidfile "$DAEMON" "$NAME"
	[ ! $xrootd_status ] && return 1

 	#MONO-NODE# NAME="cmsd"
       	#MONO-NODE# DAEMON=$(which ${NAME})
       	#MONO-NODE# pidfile=${PID_DIR}/${NAME}.pid
       	#MONO-NODE# status_of_proc -p $pidfile "$DAEMON" "$NAME"
       	#MONO-NODE# cmsd_status=$?
       	#MONO-NODE# [ ! $cmsd_status ] && return 1
 
       	return 0 
}



# See how we were called.
case "$1" in
  start)
	start_all
	;;
  stop)
	stop_all
	;;
  status)
	status_all
	;;
  restart)
	stop_all
	start_all
	;;
  try-restart|condrestart)
	if status_all > /dev/null; then
	    stop_all
	    start_all
	fi
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|try-restart}"
	exit 2
esac
