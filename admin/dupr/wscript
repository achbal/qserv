#! /usr/bin/env python
# encoding: utf-8

top = '.'
out = 'build'

def options(opt):
    opt.load('compiler_cxx')
    opt.add_option('--debug',
        help='Include debug symbols and turn compiler optimizations off',
        action='store_true', default=False, dest='debug')
    opt.add_option('--eigen-includes',
        help='Eigen library includes directory', dest='eigen_includes')
    opt.add_option('--boost-includes',
        help='Boost includes directory', dest='boost_includes')
    opt.add_option('--boost-libs',
        help='Boost libraries directory', dest='boost_libs')

def configure(conf):
    conf.load('compiler_cxx')
    conf.env.append_value('CXXFLAGS', '-Wall')
    conf.env.append_value('CXXFLAGS', '-Wextra')
    conf.env.append_value('CXXFLAGS', '-g')
    if not conf.options.debug:
        conf.env.append_value('CXXFLAGS', '-O2')
    if conf.options.eigen_includes:
        conf.env.append_value('INCLUDES', conf.options.eigen_includes)
    if conf.options.boost_includes:
        conf.env.append_value('INCLUDES', conf.options.boost_includes)
    if conf.options.boost_libs:
        conf.env.append_value('LIBPATH', conf.options.boost_libs)

    conf.check_cxx(header_name='pthread.h', mandatory=True)
    conf.check_cxx(header_name='Eigen/Core', mandatory=True)
    conf.check_cxx(header_name='boost/shared_ptr.hpp', mandatory=True)

    conf.check_cxx(lib='pthread',
                   uselib_store='PTHREAD', mandatory=True)
    conf.check_cxx(lib='boost_system',
                   uselib_store='BOOST', mandatory=True)
    conf.check_cxx(lib='boost_timer',
                   uselib_store='BOOST', mandatory=True)
    conf.check_cxx(lib='boost_program_options',
                   uselib_store='BOOST', mandatory=True)

def build(bld):
    bld.objects(
        source=bld.path.ant_glob('*.cc', excl=['Duplicate.cc', 'Index.cc', 'Partition.cc']),
        includes='.',
        target='objects'
    )
    bld.program(
        source=bld.path.ant_glob('Index.cc'),
        includes='.',
        target='qserv_dup_index',
        use='objects PTHREAD BOOST',
        install_path='${PREFIX}/bin'
    )
    bld.program(
        source=bld.path.ant_glob('Duplicate.cc'),
        includes='.',
        target='qserv_dup',
        use='objects PTHREAD BOOST',
        install_path='${PREFIX}/bin'
    )
